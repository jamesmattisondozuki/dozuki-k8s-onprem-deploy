# values.yaml:
#   This file contains the values used to create a Dozuki on-premesis depeloymet.

# hostname: The DNS name for this Dozuki deployment. This name should be the
#   dns name that you expect users to connect to.
hostname: "onprem.dozuki.app"

# dns_validation: in general this should be set to true. Set to false if deploying
#   in a context in which you do not control the DNS server.
dns_validation: true

# environment: this value should be left as "production"
environment: "production"

# customer: this is the name used to prefix all of the Kubernetes infrastructure.
#   In practice this can be anything you like, though generally your company name is
#   preferred. Cannot contain non-alphanumeric characters.
customer: "onprem"

# tls: This stanza deals with the SSL certificates that you will use for HTTPS connections
#    to the Dozuki deployment.
#    crt: Must be the fullchain (combined) certificate, base64 encoded, without any newlines.
#    key: Must be the private key, base64 encoded, without any newlines.
# Hint: in order to generate these values, `cat <certificate|key> | base64 -w0` and then copy+
# paste the output.
tls:
  cert: "U09NRSBLRVkK"
  key: "U09NRSBLRVkK"

# minio: These are the credentials for the Minio deployment. Minio is a shared file storage
#   system, much like Amazon's S3.
minio:
  user: admin
  password: jamesiscool123

# memcached: The hostname for memcached. In general, this should be left as "memcached".
memcached:
  host: "memcached"


s3:
  kmsKey: "arn:aws:kms:us-east-1:1234567890:key/some-key-id"
  imagesBucket: "s3-images-bucket"
  pdfsBucket: "s3-pdfs-bucket"
  documentsBucket: "s3-documents-bucket"
  objectsBucket: "s3-objects-bucket"

smtp:
  enabled: false
  host: "smtp.example.com"
  auth:
    enabled: false
    username: "foo"
    password: "bar"
    type: PLAIN
    from_addr: noreply@dozuki.com

db:
  host: "172.31.4.79"
  user: "root"
  password: "123456"
  rdsCaCert: |
    -----BEGIN CERTIFICATE-----
    MIIDXTCCAkWgAwIBAgIJAO9qT4jHzpTqMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
    ...
    -----END CERTIFICATE-----

sentry:
  dsn: "https://sentry-dsn.example.com"
  customerName: "example-customer"
  versionLabel: "1.0.0"

surveyjs:
  licenseKey: "surveyjs-license-key"
googleTranslate:
  token: "google-translate-token"
hostAliases:
  - ip: "168.0.0.0"
    hostnames:
      - "ping.dozuki.com"
      - "dozuki.com"
      - "www.dozuki.com"
image:
  repository: "registry.replicated.com/dozukikots/dozuki_onprem"
  tag: "e1a772955da4199ff7e361c40575f2e796625bbc.2"
  pullPolicy: "IfNotPresent"


featureRequests:
  - name: "courses"
    enabled: true
    creationPhase: "10"
    flagName: "feature-courses"
    enabledValue: "true"
    disabledValue: "false"
  - name: "guides"
    enabled: false
    creationPhase: "20"
    flagName: "feature-guides"
    enabledValue: "true"
    disabledValue: "false"
  - name: "notifications"
    enabled: true
    creationPhase: "15"
    flagName: "feature-notifications"
    enabledValue: "enabled"
    disabledValue: "disabled"

ingress:
  name: "app"
  certIssuer: "cert-issuer"
  sslRedirect: "true"
  forceSslRedirect: "true"
  configurationSnippet: "proxy_set_header X-Forwarded-Proto $scheme;"
  proxyBodySize: "0"
  ingressClassName: "nginx"
  tlsSecretName: "tls-secret"
  paths:
    - path: "/_next"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/Courses"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/Skills"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/external-training-modules"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/User/Signoffs"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/Quizzes"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/v2"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/Guide/intro/periodic-review"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/JIB"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
    - path: "/bff-api"
      pathType: "Prefix"
      service:
        name: "nextjs"
        port: 3210
        name: "app"
        port: 80
# Values.yaml for Services Template

service:
  - name: app
    creationPhase: "-1"
    appLabel: "app"
    ports:
      - name: "app-port-80"
        protocol: "TCP"
        port: 80
        targetPort: 80
  - name: searchd
    creationPhase: "-1"
    appLabel: "searchd"
    ports:
      - name: "searchd-port-3312"
        protocol: "TCP"
        port: 3312
        targetPort: 3312
  - name: pixelping
    creationPhase: "-1"
    appLabel: "pixel-ping"
    ports:
      - name: "pixel-ping-port-9187"
        protocol: "TCP"
        port: 9187
        targetPort: 9187
  - name: blessyou
    creationPhase: "-1"
    appLabel: "blessyou"
    ports:
      - name: "blessyou-port-7355"
        protocol: "TCP"
        port: 7355
        targetPort: 7355
  - name: beanstalkd
    creationPhase: "-1"
    appLabel: "beanstalkd"
    ports:
      - name: "beanstalkd-port-11300"
        protocol: "TCP"
        port: 11300
        targetPort: 11300
  - name: syslog
    creationPhase: "-1"
    appLabel: "syslog"
    ports:
      - name: "syslog-port-514"
        protocol: "UDP"
        port: 514
        targetPort: 514
  - name: consul
    creationPhase: "-1"
    appLabel: "consul"
    ports:
      - name: "consul-port-8500"
        protocol: "TCP"
        port: 8500
        targetPort: 8500
  - name: nextjs
    creationPhase: "-1"
    appLabel: "nextjs"
    ports:
      - name: "nextjs-port-3210"
        protocol: "TCP"
        port: 3210
        targetPort: 3210

# Values.yaml for Secrets Template
secrets:
  - name: ops-basic-auth
    enabled: true
    stringData:
      auth: "<infra_auth_encrypted>"

hpas:
  - name: app-hpa
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 300
          - type: Pods
            value: 2
            periodSeconds: 300
    scaleTargetRef:
      name: app-deployment
    minReplicas: 4
    maxReplicas: 30
    metrics:
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  - name: queueworkerd-hpa
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 120
          - type: Pods
            value: 2
            periodSeconds: 120
    scaleTargetRef:
      name: queueworkerd-deployment
    minReplicas: 2
    maxReplicas: 50
    metrics:
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

  - name: nextjs-hpa
    scaleTargetRef:
      name: web-nextjs-deployment
    minReplicas: 2
    maxReplicas: 20
    metrics:
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 80

# values.yaml

minio:
  enabled: false
  # Set the deployment mode to 'standalone' to use a single MinIO server
  mode: standalone

  # Set the number of replicas to 1
  replicas: 1

  # Disable the MinIO Console to prevent additional pods
  console:
    enabled: false

  # Disable tracing to prevent extra pods
  tracing:
    enabled: false

  # Configure persistence (optional)
  persistence:
    enabled: true          # Set to 'false' if you don't need data persistence
    size: 10Gi  # Adjust based on your cluster's storage classes
    storageClass: ebs-gp3

  # Provide your access and secret keys
  accessKey: myminioaccesskey
  secretKey: myminiosecretkey

  # Adjust resource requests and limits (optional)
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

  # Disable other features that may spawn additional pods
  metrics:
    enabled: false
  update:
    enabled: false

deployments:
  app:
    name: app
    replicaCount: 1
    creationPhase: "10"
    configHash: "{{ .Release.Revision }}-{{ .Release.Time.Seconds }}"
    hostAliases: "{{ .Values.hostAliases }}"
    image:
      repository: "{{ .Values.image.repository }}"
      tag: "{{ .Values.image.tag }}"
      pullPolicy: "{{ .Values.image.pullPolicy }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/app.sh"
    env:
      - name: "USER_SMTP_AUTH_ENABLED"
        value: "true"
      - name: "USER_SMTP_STARTTLS"
        value: "true"
      - name: "USER_SMTP_AUTH"
        value: "PLAIN"
      - name: "USER_SMTP_HOST"
        value: "smtp.example.com"
      - name: "USER_SMTP_USER"
        value: "user@example.com"
      - name: "USER_SMTP_PASS"
        value: "password"
      - name: "USER_SMTP_FROM"
        value: "noreply@example.com"
      - name: "SSL_PROTOCOL"
        value: "all -SSLv3 -TLSv1 -TLSv1.1"
      - name: "SSL_CIPHER_SUITE"
        value: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
      - name: "HTTPS"
        value: "on"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
      - name: "le-tls-cert"
        mountPath: "/var/www/key"
        readOnly: true
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
    ports:
      - containerPort: 80
      - containerPort: 443
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
      - name: "le-tls-cert"
        secret: "tls-secret"
    restartPolicy: "Always"
  beanstalkd:
    name: beanstalkd
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "/usr/local/bin/beanstalkd"
      - "-p"
      - "11300"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
    ports:
      - containerPort: 11300
    readinessProbe:
      tcpSocket:
        port: 11300
      initialDelaySeconds: 5
      periodSeconds: 10
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"
  blessyou:
    name: blessyou
    replicaCount: 1
    command:
      - "/opt/blessyou/bin/blessyou"
      - "--port=7355"
      - "--host=0.0.0.0"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "5m"
        memory: "64Mi"
    ports:
      - containerPort: 7355
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"

  consul:
    name: consul
    replicaCount: 1
    image:
      repository: "registry.replicated.com/dozukicloudprem/consul"
      tag: "1.6.0"
    command:
      - "/usr/local/bin/docker-entrypoint.sh"
      - "agent"
      - "-dev"
      - "-client"
      - "0.0.0.0"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "15m"
        memory: "16Mi"
    ports:
      - containerPort: 8500
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"

  crond:
    name: crond
    replicaCount: 1
    configHash: "{{ .Values.deployments.app.configHash }}"
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/crond.sh"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "10m"
        memory: "32Mi"
    livenessProbe:
      command:
        - /bin/sh
        - -c
        - "nc -z beanstalkd 11300 || exit 1"
      initialDelaySeconds: 15
      periodSeconds: 20
      failureThreshold: 3
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"
    initContainers:
      - name: wait-for-beanstalkd
        image: busybox:1.28
        command:
          - /bin/sh
          - -c
          - "until nc -z beanstalkd 11300; do echo 'Waiting for beanstalkd'; sleep 2; done"

  pixelPing:
    name: pixel-ping
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "/bin/node"
      - "/opt/pixel-ping/bin/pixel-ping"
      - "/opt/pixel-ping/config.json"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "1m"
        memory: "32Mi"
    ports:
      - containerPort: 9187
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"

  queueworkerd:
    name: queueworker
    creationPhase: "10"
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/queueworkerd.sh"
    env:
      USER_SMTP_AUTH_ENABLED: "true"
      USER_SMTP_STARTTLS: "true"
      USER_SMTP_AUTH: "PLAIN"
      USER_SMTP_HOST: "smtp.example.com"
      USER_SMTP_USER: "user@example.com"
      USER_SMTP_PASS: "password"
      USER_SMTP_FROM: "noreply@example.com"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
      - name: "sidecar-script"
        mountPath: "/sidecar"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
    livenessProbe:
      command:
        - /bin/sh
        - -c
        - "nc -z beanstalkd 11300 || exit 1"
      initialDelaySeconds: 15
      periodSeconds: 20
      failureThreshold: 3
    watcher:
      resources:
        requests:
          cpu: "50m"
          memory: "32Mi"
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
      - name: "sidecar-script"
        configMap: "beanstalkd-watcher-script"
    restartPolicy: "Always"
    initContainers:
      - name: wait-for-beanstalkd
        image: busybox:1.28
        command:
          - /bin/sh
          - -c
          - "until nc -z beanstalkd 11300; do echo 'Waiting for beanstalkd'; sleep 2; done"

  searchd:
    name: searchd
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/searchd.sh"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "100m"
        memory: "512Mi"
    ports:
      - containerPort: 3312
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app

  pixelPing:
    name: pixel-ping
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "/bin/node"
      - "/opt/pixel-ping/bin/pixel-ping"
      - "/opt/pixel-ping/config.json"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "1m"
        memory: "32Mi"
    ports:
      - containerPort: 9187
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"

  queueworkerd:
    name: queueworker
    creationPhase: "10"
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/queueworkerd.sh"
    env:
      USER_SMTP_AUTH_ENABLED: "true"
      USER_SMTP_STARTTLS: "true"
      USER_SMTP_AUTH: "PLAIN"
      USER_SMTP_HOST: "smtp.example.com"
      USER_SMTP_USER: "user@example.com"
      USER_SMTP_PASS: "password"
      USER_SMTP_FROM: "noreply@example.com"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
      - name: "sidecar-script"
        mountPath: "/sidecar"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
    livenessProbe:
      command:
        - /bin/sh
        - -c
        - "nc -z beanstalkd 11300 || exit 1"
      initialDelaySeconds: 15
      periodSeconds: 20
      failureThreshold: 3
    watcher:
      resources:
        requests:
          cpu: "50m"
          memory: "32Mi"
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
      - name: "sidecar-script"
        configMap: "beanstalkd-watcher-script"
    restartPolicy: "Always"
    initContainers:
      - name: wait-for-beanstalkd
        image: busybox:1.28
        command:
          - /bin/sh
          - -c
          - "until nc -z beanstalkd 11300; do echo 'Waiting for beanstalkd'; sleep 2; done"

  searchd:
    name: searchd
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "bash"
      - "/bootstrap/entrypoints/searchd.sh"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "100m"
        memory: "512Mi"
    ports:
      - containerPort: 3312
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - searchd
                topologyKey: "kubernetes.io/hostname"

  syslog:
    name: syslog
    replicaCount: 1
    hostAliases: "{{ .Values.hostAliases }}"
    command:
      - "/usr/sbin/syslog-ng"
      - "-F"
    volumeMounts:
      - name: "dozuki-config"
        mountPath: "/etc/dozuki"
    resources:
      requests:
        cpu: "1m"
        memory: "8Mi"
    ports:
      - containerPort: 514
    volumes:
      - name: "dozuki-config"
        configMap: "dozuki-resources-configmap"
    restartPolicy: "Always"

  webNextjs:
    name: nextjs
    replicaCount: 1
    image: "069174876992.dkr.ecr.us-east-1.amazonaws.com/web-nextjs:v1.0.30"
    imagePullPolicy: "IfNotPresent"
    command:
      - "node"
      - "server.js"
    env:
      SERVER_SIDE_MONOLITH_API_URL: "http://app"
    hostAliases: "{{ .Values.hostAliases }}"
    resources:
      requests:
        cpu: "200m"
        memory: "256Mi"
    ports:
      - containerPort: 3210
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - nextjs
                topologyKey: "kubernetes.io/hostname"
    restartPolicy: "Always"


ingress-nginx:
  defaultBackend:
    enabled: true
    image:
      image: ingress-nginx/nginx-errors
      tag: v20230312-helm-chart-4.5.2-28-g66a760794@sha256:332be6ff8c4e93e8845963932f98839dfd52ae49829c29e06475368a3e4fbd9e
    extraVolumes:
      - name: custom-error-pages
        configMap:
          name: custom-error-pages
          items:
            - key: "503.html"
              path: "5xx.html"
            - key: "503.json"
              path: "5xx.json"
    extraVolumeMounts:
      - name: custom-error-pages
        mountPath: /www
  controller:
    kind: "DaemonSet"
    admissionWebhooks:
      enabled: false
    hostPort:
      enabled: false
    ingressClass: "nginx"
    service:
      type: "NodePort"
      nodePorts:
        http: "32010"
        https: "32005"
    config:
      keep-alive: "65"                 # Keep-alive timeout in seconds
      ssl-session-cache-size: "10m"      # SSL session cache size
      ssl-session-timeout: "1d"          # SSL session timeout
      ssl-session-tickets: "on"
      upstream-keepalive-connections: "32"      # Number of keepalive connections per worker
      upstream-keepalive-timeout: "75"        # Timeout in seconds for keepalive connections
      upstream-keepalive-requests: "100"
      worker-processes: "auto"
      custom-http-errors: "503"



aws:
  region: "us-east-1"
  accountId: "1234567890"

webhooks:
  enabled: false
